#
# CORE
# Copyright (c)2010-2012 the Boeing Company.
# See the LICENSE file included in this distribution.
#
''' Sample user-defined service.
'''

import os

from core.service import CoreService, addservice
from core.misc.ipaddr import IPv4Prefix, IPv6Prefix

class BusterServer(CoreService):
    ''' This is a sample user-defined service. 
    '''
    # a unique name is required, without spaces
    _name = "BusterServer"
    # you can create your own group here
    _group = "Security"
    # list of other services this service depends on
    _depends = ()
    # per-node directories
    _dirs = ()
    # generated files (without a full path this file goes in the node's dir,
    #  e.g. /tmp/pycore.12345/n1.conf/)
    _configs = ('buster_server.cfg', 'buster_server.sh')
    # this controls the starting order vs other enabled services
    _startindex = 50
    # list of startup commands, also may be generated during startup
    _startup = ('sh buster_server.sh',)
    # list of shutdown commands
    _shutdown = ('pkill python',)

    @classmethod
    def generateconfig(cls, node, filename, services):
        ''' Return a string that will be written to filename, or sent to the
            GUI for user customization.
        '''
        cfg = ""

        if filename == "buster_server.sh":
            cfg += "#!/bin/sh\n"
            cfg += "# auto-generated by BusterServer (buster_server.py)\n"
            cfg += "sleep 30\n"
            cfg += "python -m atn.surveillance.adsb.security.buster_server\n"

        elif filename == "buster_server.cfg":
            cfg += "[glb]\n"
            cfg += "\n"
            cfg += "; Destination(s) of reliable messages\n"
            cfg += "destinations = Dump1090\n"
            cfg += "\n"
            cfg += "[Dump1090]\n"
            cfg += "type = dump1090\n"
            cfg += "server = 127.0.0.1\n"
            cfg += "port = 30001\n"

        elif filename == "sensors.txt":
            cfg += " 2, -14.0831650347, -49.4030984872, 0.\n"
            cfg += " 3, -15.2586421098, -47.8988661098, 0.\n"
            cfg += " 5, -17.6120604234, -49.3750919052, 0.\n"
            cfg += "13, -17.6105780563, -46.2006404987, 0.\n"
            cfg += "16, -14.451676914,  -46.1818781943, 0.\n"

        else:
            cfg += "# %s not defined\n" % filename

        return cfg

    @staticmethod
    def subnetentry(x):
        ''' Generate a subnet declaration block given an IPv4 prefix string
            for inclusion in the config file.
        '''
        if x.find(":") >= 0:
            # this is an IPv6 address
            return ""
        else:
            net = IPv4Prefix(x)
            return 'echo "  network %s"' % (net)

# this line is required to add the above class to the list of available services
addservice(BusterServer)
